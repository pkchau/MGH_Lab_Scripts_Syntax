#nback sdf analyzer file

#Define relevant stimuuli
picture: event_type == "Picture"
pulses:       event_type == "Pulse"
port_input:   event_type == "Port Input"
text_input:   event_type == "Text Input"
save_logfile: event_type == "Save Logfile"
control:      event_type == "Pause" or event_type == "Resume" or event_type == "Quit"

stimulus: (picture) and (is_target!="")
stim_count = count (stimulus)

#Event set 'response' contains all events that are responses and for which immediately preceding event is in the event set "stimulus". 
response: event_type == "Response" and rel_index_range(-1, -1) is stimulus
response_count = count(response)

#Timing uncertainty
unc_over_1 : time_uncertainty > 1
over1_count = count( unc_over_1 )
unc_over_5 : time_uncertainty > 5
over5_count = count( unc_over_5 )

#Create custom analysis table w/ variables we want to look at
event_table custom_table(subjectID, nback, trial, event_type, letter, is_target, time)

#Matches stimulus w/ response (w/in 100-2000ms of first event)
pair:: simple_match_all(100,2000,stimulus,response)

#Classify event pairs
target(pair) :: is_target1=="yes"
target_count = count(target)

all_resp(pair) :: code2 == "1" or code2 == "2"
all_resp_count = count(all_resp)
correct_hit(pair) :: (is_target1 == "yes") and (code2 == "1" or code2 == "2")
correct_hit_count = count(correct_hit)

correct_noresp(pair) :: is_target1 == "no" and code2 == ""
correct_noresp_count = count(correct_noresp) 

correct(pair) :: (is_target1 == "yes" and (code2 == "1" or code2 == "2")) or (is_target1 == "no" and code2 == "")
correct_count = count(correct)

correct_1back(pair) :: (nback1 == "1") and ((is_target1 == "yes" and (code2 == "1" or code2 == "2")) or (is_target1 == "no" and code2 == ""))
correct_1back_count = count(correct_1back)
oneback(pair):: (nback1 == "1") 
oneback_count = count(oneback)

correct_2back(pair) :: (nback1 == "2") and ((is_target1 == "yes" and (code2 == "1" or code2 == "2")) or (is_target1 == "no" and code2 == ""))
correct_2back_count = count(correct_2back)
twoback(pair):: (nback1 == "2")
twoback_count = count(twoback)

correct_3back(pair) :: (nback1 == "3") and ((is_target1 == "yes" and (code2 == "1" or code2 == "2")) or (is_target1 == "no" and code2 == ""))
correct_3back_count = count(correct_3back)
threeback(pair):: (nback1 == "3")
threeback_count = count(threeback)

correct_4back(pair) :: (nback1 == "4") and ((is_target1 == "yes" and (code2 == "1" or code2 == "2")) or (is_target1 == "no" and code2 == ""))
correct_4back_count = count(correct_4back)
fourback(pair):: (nback1 == "4")
fourback_count = count(fourback)

correct_5back(pair) :: (nback1 == "5") and ((is_target1 == "yes" and (code2 == "1" or code2 == "2")) or (is_target1 == "no" and code2 == ""))
correct_5back_count = count(correct_5back)
fiveback(pair):: (nback1 == "5")
fiveback_count = count(fiveback)

miss(target):: code2 == "" and is_target1 == "yes"
miss_count = count(miss)
false_alarm (pair):: (is_target1 == "no") and (code2 == "1" or code2 == "2")
false_alarm_count = count (false_alarm)

#Check event pairs
#check = stim_count - correct_count - miss_count - false_alarm_count

RT_1(rm_all) :: (time_diff > 0) and (nback1 == "1")
RT_2(rm_all) :: (time_diff > 0) and (nback1 == "2")
RT_3(rm_all) :: (time_diff > 0) and (nback1 == "3")
RT_4(rm_all) :: (time_diff > 0) and (nback1 == "4")
RT_5(rm_all) :: (time_diff > 0) and (nback1 == "5")

#Calculate averages
avg_overall_acc = correct_count/stim_count
avg_1back_acc = correct_1back_count/oneback_count
avg_2back_acc = correct_2back_count/twoback_count
avg_3back_acc = correct_3back_count/threeback_count
avg_4back_acc = correct_4back_count/fourback_count
avg_5back_acc = correct_5back_count/fiveback_count

avg_1back_rt = avg(RT_1, time_diff)
avg_2back_rt = avg(RT_2, time_diff)
avg_3back_rt = avg(RT_3, time_diff)
avg_4back_rt = avg(RT_4, time_diff)
avg_5back_rt = avg(RT_5, time_diff)

#Define event pair property
event_pair_property accuracy (correct, miss, false_alarm)

#Create FINAL Analysis Table and print as file
event_pair_table FINAL_table(subjectID1, nback1, trial1, letter1, is_target1, code2, accuracy, time_diff)
print FINAL_table (pair, "\t", "\n")
print "avg acc over all nbacks= ", avg_overall_acc
print "avg lvl 1 acc = ", avg_1back_acc
print "avg lvl 2 acc = ", avg_2back_acc
print "avg lvl 3 acc = ", avg_3back_acc
print "avg lvl 4 acc = ", avg_4back_acc
print "avg lvl 5 acc = ", avg_5back_acc
print "avg lvl 1 RT = ", avg_1back_rt
print "avg lvl 2 RT = ", avg_2back_rt
print "avg lvl 3 RT = ", avg_3back_rt
print "avg lvl 4 RT = ", avg_4back_rt
print "avg lvl 5 RT = ", avg_5back_rt